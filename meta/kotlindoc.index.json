{
  "ownKey": "kotlindoc",
  "childrenPages": {"kotlindoc": {
    "ownKey": "kotlindoc",
    "childrenPages": {
      "forest": {
        "ownKey": "forest",
        "childrenPages": {"big": {
          "ownKey": "big",
          "childrenPages": {"forest": {
            "ownKey": "forest",
            "childrenPages": {
              "forestconfig": {
                "ownKey": "forestconfig",
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc/forest",
                    "baseUrl": "https://sukhai.github.io/forest",
                    "fileName": "big/forest/forestconfig",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://sukhai.github.io/forest/kotlindoc/forest/big/forest/forestconfig"
                  },
                  "description": "",
                  "title": "ForestConfig",
                  "content": "<p>An object that stores the configuration of a  Forest .<\/p>level\n<p>The logging level. This sets what level of log to be passed to a  Tree .<\/p>\npreProcessLog\n<p>A callback to be invoked before passing a  LogEntry  to the\n Tree . This is useful to filter or modify a  LogEntry  before the log is being\npassed to  Tree.log .<\/p>\nallowGlobalOverride\n<p>Setting <code>true<\/code> will allow any configuration change from\n Forest.Global  to override this  Forest , <code>false<\/code> will prevent this override.<\/p>\nplant\n<p>Plant the  tree  to this  Forest . Any logging method call (i.e  Forest.d ,\n Forest.i , etc) will be forwarded to this  tree  if the  Forest  determine\nit should log the given message.<\/p>\ncut\n<p>Cut the  tree  from this  Forest . Any logging method call (i.e  Forest.d ,\n Forest.i , etc) will no longer be forwarded to this  tree .<\/p>\n"
                }]
              },
              "forest": {
                "ownKey": "forest",
                "childrenPages": {
                  "level": {
                    "ownKey": "level",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc/forest",
                        "baseUrl": "https://sukhai.github.io/forest",
                        "fileName": "big/forest/forest/level",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://sukhai.github.io/forest/kotlindoc/forest/big/forest/forest/level"
                      },
                      "description": "",
                      "title": "Level",
                      "content": "<p>A class that represents the logging level. A  Forest  will use the level\nto determine if it should log a given  LogEntry .<\/p><p>The order of the levels is (except  Level.OFF ):<\/p><ol><li> Level.FATAL <\/li><li> Level.ERROR <\/li><li> Level.WARN <\/li><li> Level.INFO <\/li><li> Level.DEBUG <\/li><li> Level.VERBOSE <\/li><\/ol>OFF\n<p>Turn off logging.<\/p>\nFATAL\n<p>Indicates a serious failure that could potentially prevent\nuser from continuing using the program.<\/p>\nERROR\n<p>Indicates a failure but the user is able to continue using the\nprogram, or the program is capable of automatically recover from\nit.<\/p>\nWARN\n<p>Indicates a potential problem.<\/p>\nINFO\n<p>Indicates the log is for informational purposes.<\/p>\nDEBUG\n<p>Indicates a tracing information log.<\/p>\nVERBOSE\n<p>Indicates a highly detailed tracing log.<\/p>\n"
                    }]
                  },
                  "global": {
                    "ownKey": "global",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc/forest",
                        "baseUrl": "https://sukhai.github.io/forest",
                        "fileName": "big/forest/forest/global",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://sukhai.github.io/forest/kotlindoc/forest/big/forest/forest/global"
                      },
                      "description": "",
                      "title": "Global",
                      "content": "<p>A singleton class that represents the global  Forest . This global  Forest \nholds a collection of  Forest s that are created through  getForest .<\/p><p>Any changes to this global  Forest , except logging through this global\n Forest , will be forwarded to the collection of  Forest s that this\nglobal  Forest  holds. You can however set  Forest.allowGlobalOverride \nto <code>false<\/code> to disable this setting. By default  Forest.allowGlobalOverride \nis <code>true<\/code>.<\/p><p>This global  Forest  has a special property called  context , which holds a\nsharable data across all the  Tree s every  Forest s hold. This  context  can\nbe used to set global data that will be passed to every  Tree  every\n Forest s this object hold.\nYou can add data to the  context  like the following example:<\/p><pre><code>\nForest.context[\"key1\"] = \"value1\"\nForest.context[\"key2\"] = 123\n<\/code><\/pre><p>both examples do the same thing.<\/p>Global\n<p>A singleton class that represents the global  Forest . This global  Forest \nholds a collection of  Forest s that are created through  getForest .<\/p><p>Any changes to this global  Forest , except logging through this global\n Forest , will be forwarded to the collection of  Forest s that this\nglobal  Forest  holds. You can however set  Forest.allowGlobalOverride \nto <code>false<\/code> to disable this setting. By default  Forest.allowGlobalOverride \nis <code>true<\/code>.<\/p><p>This global  Forest  has a special property called  context , which holds a\nsharable data across all the  Tree s every  Forest s hold. This  context  can\nbe used to set global data that will be passed to every  Tree  every\n Forest s this object hold.\nYou can add data to the  context  like the following example:<\/p><pre><code>\nForest.context[\"key1\"] = \"value1\"\nForest.context[\"key2\"] = 123\n<\/code><\/pre><p>both examples do the same thing.<\/p>\n"
                    }]
                  }
                },
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc/forest",
                    "baseUrl": "https://sukhai.github.io/forest",
                    "fileName": "big/forest/forest",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://sukhai.github.io/forest/kotlindoc/forest/big/forest/forest"
                  },
                  "description": "",
                  "title": "Forest",
                  "content": "<p>An object that allows the user to send any log entry to a group of  Tree s.<\/p><p>You can create or get an implementation of this interface through\n Forest.getForest .<\/p>level\n<p>The logging level of this  Forest . This level will be used to\ndetermine if it should log a given  LogEntry .<\/p><p>The order of the levels is (except  Level.OFF ):<\/p><ol><li> Level.FATAL <\/li><li> Level.ERROR <\/li><li> Level.WARN <\/li><li> Level.INFO <\/li><li> Level.DEBUG <\/li><li> Level.VERBOSE <\/li><\/ol><p>This  Forest  will only log a  LogEntry  if the given level is\nless than this  level . For example, if this  level  is set to\n VERBOSE , then calling  Forest.i  will log a given  LogEntry \nbecause  VERBOSE  is higher level than  INFO .\nIn contrast, if this  level  is set to  INFO  and  Forest.v  is\ncalled, then the  LogEntry  will not be logged because  INFO \nlevel is lower than  VERBOSE .<\/p><p>Setting this value to  Level.OFF  will not log any  LogEntry  and none\nof the  Tree  this  Forest  holds will receive a  Tree.log  call.<\/p>\nname\n<p>The name of the  Forest . This value will be used as the  LogEntry.tag \nif this value is not <code>null<\/code>. This value is set when  Forest.getForest \nis called.<\/p>\ntrees\n<p>A collection of  Tree s in this  Forest  that were planted through\n plant  method.<\/p>\nplant\n<p>Plant the  tree  to this  Forest . This  tree  will handle the log\nfrom this  Forest .<\/p>\ncut\n<p>Cut the  tree  from this  Forest . This  tree  will no longer handle\nthe log coming from this  Forest .<\/p>\ndeforest\n<p>Clear up all the  Tree s in this  Forest .<\/p>\npreProcessLog\n<p>Set the  PreProcessLogCallback  to this  Forest . This will allow the\n Forest  to send the  LogEntry  every time before it's sent to the\n Tree s.\nYou can use this callback to filter or modify a  LogEntry  before the\n LogEntry  is being sent to the  Tree s in this  Forest .<\/p>\nv\n<p>Log a message with  Level.VERBOSE  level.<\/p>\nv\n<p>Log a message with  Level.VERBOSE  level.<\/p>\nv\n<p>Log a message with  Level.VERBOSE  level.<\/p>\nd\n<p>Log a message with  Level.DEBUG  level.<\/p>\nd\n<p>Log a message with  Level.DEBUG  level.<\/p>\nd\n<p>Log a message with  Level.DEBUG  level.<\/p>\ni\n<p>Log a message with  Level.INFO  level.<\/p>\ni\n<p>Log a message with  Level.INFO  level.<\/p>\ni\n<p>Log a message with  Level.INFO  level.<\/p>\nw\n<p>Log a message with  Level.WARN  level.<\/p>\nw\n<p>Log a message with  Level.WARN  level.<\/p>\nw\n<p>Log a message with  Level.WARN  level.<\/p>\ne\n<p>Log a message with  Level.ERROR  level.<\/p>\ne\n<p>Log a message with  Level.ERROR  level.<\/p>\ne\n<p>Log a message with  Level.ERROR  level.<\/p>\nf\n<p>Log a message with  Level.FATAL  level.<\/p>\nf\n<p>Log a message with  Level.FATAL  level.<\/p>\nf\n<p>Log a message with  Level.FATAL  level.<\/p>\nlog\n<p>Log a message.<\/p>\nForest\n<p>An object that allows the user to send any log entry to a group of  Tree s.<\/p><p>You can create or get an implementation of this interface through\n Forest.getForest .<\/p>\n"
                }]
              },
              "preprocesslogcallback": {
                "ownKey": "preprocesslogcallback",
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc/forest",
                    "baseUrl": "https://sukhai.github.io/forest",
                    "fileName": "big/forest/preprocesslogcallback",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://sukhai.github.io/forest/kotlindoc/forest/big/forest/preprocesslogcallback"
                  },
                  "description": "",
                  "title": "PreProcessLogCallback",
                  "content": "<p>A callback that will be invoked before processing a  LogEntry .<\/p>\n"
                }]
              },
              "abstractforest": {
                "ownKey": "abstractforest",
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc/forest",
                    "baseUrl": "https://sukhai.github.io/forest",
                    "fileName": "big/forest/abstractforest",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://sukhai.github.io/forest/kotlindoc/forest/big/forest/abstractforest"
                  },
                  "description": "",
                  "title": "AbstractForest",
                  "content": "<p>An abstract class that implements the  Forest .<\/p>level\n<p>The logging level of this  Forest . This level will be used to\ndetermine if it should log a given  LogEntry .<\/p><p>The order of the levels is (except  Level.OFF ):<\/p><ol><li> Level.FATAL <\/li><li> Level.ERROR <\/li><li> Level.WARN <\/li><li> Level.INFO <\/li><li> Level.DEBUG <\/li><li> Level.VERBOSE <\/li><\/ol><p>This  Forest  will only log a  LogEntry  if the given level is\nless than this  level . For example, if this  level  is set to\n VERBOSE , then calling  Forest.i  will log a given  LogEntry \nbecause  VERBOSE  is higher level than  INFO .\nIn contrast, if this  level  is set to  INFO  and  Forest.v  is\ncalled, then the  LogEntry  will not be logged because  INFO \nlevel is lower than  VERBOSE .<\/p><p>Setting this value to  Level.OFF  will not log any  LogEntry  and none\nof the  Tree  this  Forest  holds will receive a  Tree.log  call.<\/p>\ntrees\n<p>A collection of  Tree s in this  Forest  that were planted through\n plant  method.<\/p>\nname\n<p>The name of the  Forest . This value will be used as the  LogEntry.tag \nif this value is not <code>null<\/code>. This value is set when  Forest.getForest \nis called.<\/p>\n<init>\n<p>An abstract class that implements the  Forest .<\/p>\nplant\n<p>Plant the  tree  to this  Forest . This  tree  will handle the log\nfrom this  Forest .<\/p>\ncut\n<p>Cut the  tree  from this  Forest . This  tree  will no longer handle\nthe log coming from this  Forest .<\/p>\ndeforest\n<p>Clear up all the  Tree s in this  Forest .<\/p>\npreProcessLog\n<p>Set the  PreProcessLogCallback  to this  Forest . This will allow the\n Forest  to send the  LogEntry  every time before it's sent to the\n Tree s.\nYou can use this callback to filter or modify a  LogEntry  before the\n LogEntry  is being sent to the  Tree s in this  Forest .<\/p>\nv\n<p>Log a message with  Level.VERBOSE  level.<\/p>\nv\n<p>Log a message with  Level.VERBOSE  level.<\/p>\nv\n<p>Log a message with  Level.VERBOSE  level.<\/p>\nv\n<p>Log a message with  Level.VERBOSE  level.<\/p>\nv\n<p>Log a message with  Level.VERBOSE  level.<\/p>\nv\n<p>Log a message with  Level.VERBOSE  level.<\/p>\nd\n<p>Log a message with  Level.DEBUG  level.<\/p>\nd\n<p>Log a message with  Level.DEBUG  level.<\/p>\nd\n<p>Log a message with  Level.DEBUG  level.<\/p>\nd\n<p>Log a message with  Level.DEBUG  level.<\/p>\nd\n<p>Log a message with  Level.DEBUG  level.<\/p>\nd\n<p>Log a message with  Level.DEBUG  level.<\/p>\ni\n<p>Log a message with  Level.INFO  level.<\/p>\ni\n<p>Log a message with  Level.INFO  level.<\/p>\ni\n<p>Log a message with  Level.INFO  level.<\/p>\ni\n<p>Log a message with  Level.INFO  level.<\/p>\ni\n<p>Log a message with  Level.INFO  level.<\/p>\ni\n<p>Log a message with  Level.INFO  level.<\/p>\nw\n<p>Log a message with  Level.WARN  level.<\/p>\nw\n<p>Log a message with  Level.WARN  level.<\/p>\nw\n<p>Log a message with  Level.WARN  level.<\/p>\nw\n<p>Log a message with  Level.WARN  level.<\/p>\nw\n<p>Log a message with  Level.WARN  level.<\/p>\nw\n<p>Log a message with  Level.WARN  level.<\/p>\ne\n<p>Log a message with  Level.ERROR  level.<\/p>\ne\n<p>Log a message with  Level.ERROR  level.<\/p>\ne\n<p>Log a message with  Level.ERROR  level.<\/p>\ne\n<p>Log a message with  Level.ERROR  level.<\/p>\ne\n<p>Log a message with  Level.ERROR  level.<\/p>\ne\n<p>Log a message with  Level.ERROR  level.<\/p>\nf\n<p>Log a message with  Level.FATAL  level.<\/p>\nf\n<p>Log a message with  Level.FATAL  level.<\/p>\nf\n<p>Log a message with  Level.FATAL  level.<\/p>\nf\n<p>Log a message with  Level.FATAL  level.<\/p>\nf\n<p>Log a message with  Level.FATAL  level.<\/p>\nf\n<p>Log a message with  Level.FATAL  level.<\/p>\nlog\n<p>Log a message.<\/p>\n"
                }]
              },
              "logentry": {
                "ownKey": "logentry",
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc/forest",
                    "baseUrl": "https://sukhai.github.io/forest",
                    "fileName": "big/forest/logentry",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://sukhai.github.io/forest/kotlindoc/forest/big/forest/logentry"
                  },
                  "description": "",
                  "title": "LogEntry",
                  "content": "<p>An object that holds the information of a log.<\/p>level\n<p>The logging level of the log.\nthe  Forest  received a logging call.<\/p>\nmessage\n<p>The message to be logged.<\/p>\ncontext\n<p>The  ForestContext  that contains the data from the  Forest .<\/p>\ntag\n<p>The tag. The value is either the name of a  Forest  set from  getForest \nor the class name of the first stacktrace from the  throwable , if any.<\/p>\nthrowable\n<p>The Throwable to be logged.<\/p>\nattributes\n<p>A collection of attributes to be added to this log.<\/p>\n<init>\n<p>An object that holds the information of a log.<\/p>\n"
                }]
              },
              "android": {
                "ownKey": "android",
                "childrenPages": {"trees": {
                  "ownKey": "trees",
                  "childrenPages": {"debugtree": {
                    "ownKey": "debugtree",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc/forest",
                        "baseUrl": "https://sukhai.github.io/forest",
                        "fileName": "big/forest/android/trees/debugtree",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://sukhai.github.io/forest/kotlindoc/forest/big/forest/android/trees/debugtree"
                      },
                      "description": "",
                      "title": "DebugTree",
                      "content": "<p>A debug tree that uses Android logger to log messages.<\/p><init>\n<p>A debug tree that uses Android logger to log messages.<\/p>\nlog\n<p>A method to handle the given log  entry  that was sent from  Forest  or caller of\nthis class.<\/p>\n"
                    }]
                  }},
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc/forest",
                      "baseUrl": "https://sukhai.github.io/forest",
                      "fileName": "big/forest/android/trees",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://sukhai.github.io/forest/kotlindoc/forest/big/forest/android/trees"
                    },
                    "description": "",
                    "title": "big.forest.android.trees",
                    "content": "<p>DebugTree<\/p>\n<p>A debug tree that uses Android logger to log messages.<\/p>\n"
                  }]
                }}
              },
              "context": {
                "ownKey": "context",
                "childrenPages": {
                  "modifiedstate": {
                    "ownKey": "modifiedstate",
                    "childrenPages": {
                      "new": {
                        "ownKey": "new",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc/forest",
                            "baseUrl": "https://sukhai.github.io/forest",
                            "fileName": "big/forest/context/modifiedstate/new",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://sukhai.github.io/forest/kotlindoc/forest/big/forest/context/modifiedstate/new"
                          },
                          "description": "",
                          "title": "New",
                          "content": "<p>A new key-value data has been added to the  ForestContext .<\/p>key\n<p>The key with which the specified value is to be associated.<\/p>\nvalue\n<p>The new value which is added to the  ForestContext  and\nis associated with the  key .<\/p>\n<init>\n<p>A new key-value data has been added to the  ForestContext .<\/p>\n"
                        }]
                      },
                      "removed": {
                        "ownKey": "removed",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc/forest",
                            "baseUrl": "https://sukhai.github.io/forest",
                            "fileName": "big/forest/context/modifiedstate/removed",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://sukhai.github.io/forest/kotlindoc/forest/big/forest/context/modifiedstate/removed"
                          },
                          "description": "",
                          "title": "Removed",
                          "content": "<p>A key-value data has been removed from the  ForestContext .<\/p>key\n<p>The key with which the specified value is to be associated.<\/p>\nvalue\n<p>The previous value which is removed from the  ForestContext  and\nis associated with the  key .<\/p>\n<init>\n<p>A key-value data has been removed from the  ForestContext .<\/p>\n"
                        }]
                      },
                      "updated": {
                        "ownKey": "updated",
                        "ownPages": [{
                          "reference": {
                            "path": "kotlindoc/forest",
                            "baseUrl": "https://sukhai.github.io/forest",
                            "fileName": "big/forest/context/modifiedstate/updated",
                            "extension": "html",
                            "usePrettyUrl": true,
                            "link": "https://sukhai.github.io/forest/kotlindoc/forest/big/forest/context/modifiedstate/updated"
                          },
                          "description": "",
                          "title": "Updated",
                          "content": "<p>A key-value data has been updated from the  ForestContext .<\/p>key\n<p>The key with which the specified value is to be associated.<\/p>\noldValue\n<p>The previous value which is replaced with the\n newValue  and is associated with the  key .<\/p>\nnewValue\n<p>The new value which is replacing the  oldValue  and\nis associated with the  key .<\/p>\n<init>\n<p>A key-value data has been updated from the  ForestContext .<\/p>\n"
                        }]
                      }
                    },
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc/forest",
                        "baseUrl": "https://sukhai.github.io/forest",
                        "fileName": "big/forest/context/modifiedstate",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://sukhai.github.io/forest/kotlindoc/forest/big/forest/context/modifiedstate"
                      },
                      "description": "",
                      "title": "ModifiedState",
                      "content": "<p>The state of the  ForestContext  modification.<\/p>key\n<p>The key with which the specified value is to be associated.<\/p>\n"
                    }]
                  },
                  "forestcontext": {
                    "ownKey": "forestcontext",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc/forest",
                        "baseUrl": "https://sukhai.github.io/forest",
                        "fileName": "big/forest/context/forestcontext",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://sukhai.github.io/forest/kotlindoc/forest/big/forest/context/forestcontext"
                      },
                      "description": "",
                      "title": "ForestContext",
                      "content": "<p>A modifiable collection that holds pairs of objects that use by  Forest  and  Tree .<\/p><pre class=\"language-kotlin\"><code class=\"language-kotlin\">/**\n * A type of [ForestContext] that store data in a [ConcurrentHashMap].\n *\n * You can instantiate an instance of this class through [ForestContext.createDataContext].\n */\nclass ForestDataContext internal constructor() : ForestContext {\n    private val map = ConcurrentHashMap<String, Any>()\n    private var listener: ((ModifiedState) -> Unit)? = null\n\n    override val size: Int\n        get() = map.size\n\n    override val keys: Set<String>\n        get() = map.keys\n\n    override val values: Collection<Any>\n        get() = map.values\n\n    override fun containsKey(key: String): Boolean {\n        return map.containsKey(key)\n    }\n\n    override fun containsValue(value: Any): Boolean {\n        return map.containsValue(value)\n    }\n\n    override operator fun get(key: String): Any? {\n        return map[key]\n    }\n\n    override fun isEmpty(): Boolean {\n        return map.isEmpty()\n    }\n\n    override fun clear() {\n        map.clear()\n    }\n\n    override fun put(key: String, value: Any): Any? {\n        val old = map.put(key, value)\n        listener?.invoke(\n            if (old == null) {\n                ModifiedState.New(key, value)\n            } else {\n                ModifiedState.Updated(key, old, value)\n            }\n        )\n        return old\n    }\n\n    override fun remove(key: String): Any? {\n        val old = map.remove(key)\n        if (old != null && listener != null) {\n            listener?.invoke(ModifiedState.Removed(key, old))\n        }\n        return old\n    }\n\n    override fun setOnModifiedListener(listener: (ModifiedState) -> Unit) {\n        this.listener = listener\n    }\n\n    override fun removeOnModifiedListener() {\n        listener = null\n    }\n\n    override fun toString(): String {\n        return map.toString()\n    }\n}<\/code><\/pre>size\n<p>Return the number of data in the context.<\/p>\nkeys\n<p>Return all the keys from the context.<\/p>\nvalues\n<p>Return all the values from the context.<\/p>\ncontainsKey\n<p>Check if this context contains the given  key .<\/p>\ncontainsValue\n<p>Check if this context contains the given  value .<\/p>\nget\n<p>Return a value with the given  key  found in the context.<\/p>\nisEmpty\n<p>Check if this context is empty.<\/p>\nclear\n<p>Clear all the data from the context.<\/p>\nput\n<p>Maps the given  key  to the specified value in this context.\nNeither the key nor the value can be null.\nThe value can be retrieved by calling the get method with a key that\nis equal to the original key.<\/p>\nremove\n<p>Removes the  key  (and its corresponding value) from this context.\nThis method does nothing if the  key  is not in the context.<\/p>\nsetOnModifiedListener\n<p>Set a callback to the  ForestContext .<\/p>\nremoveOnModifiedListener\n<p>Remove the modified callback listener from the  ForestContext .<\/p>\nset\n<p>Maps the given  key  to the specified value in this context.\nNeither the key nor the value can be null.\nThe value can be retrieved by calling the get method with a key that\nis equal to the original key.<\/p>\nForestContext\n<p>A modifiable collection that holds pairs of objects that use by  Forest  and  Tree .<\/p><pre class=\"language-kotlin\"><code class=\"language-kotlin\">/**\n * A type of [ForestContext] that store data in a [ConcurrentHashMap].\n *\n * You can instantiate an instance of this class through [ForestContext.createDataContext].\n */\nclass ForestDataContext internal constructor() : ForestContext {\n    private val map = ConcurrentHashMap<String, Any>()\n    private var listener: ((ModifiedState) -> Unit)? = null\n\n    override val size: Int\n        get() = map.size\n\n    override val keys: Set<String>\n        get() = map.keys\n\n    override val values: Collection<Any>\n        get() = map.values\n\n    override fun containsKey(key: String): Boolean {\n        return map.containsKey(key)\n    }\n\n    override fun containsValue(value: Any): Boolean {\n        return map.containsValue(value)\n    }\n\n    override operator fun get(key: String): Any? {\n        return map[key]\n    }\n\n    override fun isEmpty(): Boolean {\n        return map.isEmpty()\n    }\n\n    override fun clear() {\n        map.clear()\n    }\n\n    override fun put(key: String, value: Any): Any? {\n        val old = map.put(key, value)\n        listener?.invoke(\n            if (old == null) {\n                ModifiedState.New(key, value)\n            } else {\n                ModifiedState.Updated(key, old, value)\n            }\n        )\n        return old\n    }\n\n    override fun remove(key: String): Any? {\n        val old = map.remove(key)\n        if (old != null && listener != null) {\n            listener?.invoke(ModifiedState.Removed(key, old))\n        }\n        return old\n    }\n\n    override fun setOnModifiedListener(listener: (ModifiedState) -> Unit) {\n        this.listener = listener\n    }\n\n    override fun removeOnModifiedListener() {\n        listener = null\n    }\n\n    override fun toString(): String {\n        return map.toString()\n    }\n}<\/code><\/pre>\n"
                    }]
                  },
                  "forestdatacontext": {
                    "ownKey": "forestdatacontext",
                    "ownPages": [{
                      "reference": {
                        "path": "kotlindoc/forest",
                        "baseUrl": "https://sukhai.github.io/forest",
                        "fileName": "big/forest/context/forestdatacontext",
                        "extension": "html",
                        "usePrettyUrl": true,
                        "link": "https://sukhai.github.io/forest/kotlindoc/forest/big/forest/context/forestdatacontext"
                      },
                      "description": "",
                      "title": "ForestDataContext",
                      "content": "<p>A type of  ForestContext  that store data in a <a href=\"https://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ConcurrentHashMap.html\">ConcurrentHashMap<\/a>.<\/p><p>You can instantiate an instance of this class through  ForestContext.createDataContext .<\/p>size\n<p>Return the number of data in the context.<\/p>\nkeys\n<p>Return all the keys from the context.<\/p>\nvalues\n<p>Return all the values from the context.<\/p>\ncontainsKey\n<p>Check if this context contains the given  key .<\/p>\ncontainsValue\n<p>Check if this context contains the given  value .<\/p>\nget\n<p>Return a value with the given  key  found in the context.<\/p>\nisEmpty\n<p>Check if this context is empty.<\/p>\nclear\n<p>Clear all the data from the context.<\/p>\nput\n<p>Maps the given  key  to the specified value in this context.\nNeither the key nor the value can be null.\nThe value can be retrieved by calling the get method with a key that\nis equal to the original key.<\/p>\nremove\n<p>Removes the  key  (and its corresponding value) from this context.\nThis method does nothing if the  key  is not in the context.<\/p>\nsetOnModifiedListener\n<p>Set a callback to the  ForestContext .<\/p>\nremoveOnModifiedListener\n<p>Remove the modified callback listener from the  ForestContext .<\/p>\ntoString\n"
                    }]
                  }
                },
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc/forest",
                    "baseUrl": "https://sukhai.github.io/forest",
                    "fileName": "big/forest/context",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://sukhai.github.io/forest/kotlindoc/forest/big/forest/context"
                  },
                  "description": "",
                  "title": "big.forest.context",
                  "content": "<p>ForestContext\n<p>A modifiable collection that holds pairs of objects that use by  Forest  and  Tree .<\/p><pre class=\"language-kotlin\"><code class=\"language-kotlin\">/**<\/p>\n<ul>\n<li>\n<p>A type of [ForestContext] that store data in a [ConcurrentHashMap].<\/p>\n<\/li>\n<li><\/li>\n<li this.listener=\"listener\" listener=\"null\">\n<p>You can instantiate an instance of this class through [ForestContext.createDataContext].\n*/\nclass ForestDataContext internal constructor() : ForestContext {\nprivate val map = ConcurrentHashMap&lt;String, Any&gt;()\nprivate var listener: ((ModifiedState) -&gt; Unit)? = null<\/p>\n<p>override val size: Int\nget() = map.size<\/p>\n<p>override val keys: Set<String>\nget() = map.keys<\/p>\n<p>override val values: Collection<Any>\nget() = map.values<\/p>\n<p>override fun containsKey(key: String): Boolean {\nreturn map.containsKey(key)\n}<\/p>\n<p>override fun containsValue(value: Any): Boolean {\nreturn map.containsValue(value)\n}<\/p>\n<p>override operator fun get(key: String): Any? {\nreturn map[key]\n}<\/p>\n<p>override fun isEmpty(): Boolean {\nreturn map.isEmpty()\n}<\/p>\n<p>override fun clear() {\nmap.clear()\n}<\/p>\n<p>override fun put(key: String, value: Any): Any? {\nval old = map.put(key, value)\nlistener?.invoke(\nif (old == null) {\nModifiedState.New(key, value)\n} else {\nModifiedState.Updated(key, old, value)\n}\n)\nreturn old\n}<\/p>\n<p>override fun remove(key: String): Any? {\nval old = map.remove(key)\nif (old != null &amp;&amp; listener != null) {\nlistener?.invoke(ModifiedState.Removed(key, old))\n}\nreturn old\n}<\/p>\n<p>override fun setOnModifiedListener(listener: (ModifiedState) -&gt; Unit)<\/p>\n<p>override fun removeOnModifiedListener()<\/p>\n<p>override fun toString(): String {\nreturn map.toString()\n}\n}<\/code><\/pre>\nForestDataContext<\/p>\n<\/li>\n<\/ul>\n<p>A type of  ForestContext  that store data in a <a href=\"https://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ConcurrentHashMap.html\">ConcurrentHashMap<\/a>.<\/p><p>You can instantiate an instance of this class through  ForestContext.createDataContext .<\/p>\nModifiedState\n<p>The state of the  ForestContext  modification.<\/p>\n"
                }]
              },
              "tree": {
                "ownKey": "tree",
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc/forest",
                    "baseUrl": "https://sukhai.github.io/forest",
                    "fileName": "big/forest/tree",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://sukhai.github.io/forest/kotlindoc/forest/big/forest/tree"
                  },
                  "description": "",
                  "title": "Tree",
                  "content": "<p>A handler to all the logs that sent to  Forest .<\/p><p>The implementation class will just have to implement the only method in this interface,\nwhich is  log .<\/p><p>Whenever  Forest.log -type method is called, it will construct a  LogEntry  and delegate\nthe actual handling to the  log  method in this class.<\/p>log\n<p>A method to handle the given log  entry  that was sent from  Forest  or caller of\nthis class.<\/p>\n"
                }]
              }
            },
            "ownPages": [{
              "reference": {
                "path": "kotlindoc/forest",
                "baseUrl": "https://sukhai.github.io/forest",
                "fileName": "big/forest",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://sukhai.github.io/forest/kotlindoc/forest/big/forest"
              },
              "description": "",
              "title": "big.forest",
              "content": "<p>AbstractForest<\/p>\n<p>An abstract class that implements the  Forest .<\/p>\nPreProcessLogCallback\n<p>A callback that will be invoked before processing a  LogEntry .<\/p>\nForest\n<p>An object that allows the user to send any log entry to a group of  Tree s.<\/p><p>You can create or get an implementation of this interface through\n Forest.getForest .<\/p>\nForestConfig\n<p>An object that stores the configuration of a  Forest .<\/p>\nLogEntry\n<p>An object that holds the information of a log.<\/p>\nTree\n<p>A handler to all the logs that sent to  Forest .<\/p><p>The implementation class will just have to implement the only method in this interface,\nwhich is  log .<\/p><p>Whenever  Forest.log -type method is called, it will construct a  LogEntry  and delegate\nthe actual handling to the  log  method in this class.<\/p>\nbig.forest.android.trees\n<p>big.forest.context<\/p>\n<p>PreProcessLogCallback<\/p>\n<p>A callback that will be invoked before processing a  LogEntry .<\/p>\ngetForest\n<p>Get or create a  Forest  with the given  name .<\/p><p>You can configure the  Forest  by using  configure  if this method is\ncreating the  Forest , otherwise the  configure  will not apply the\nconfiguration to the returning  Forest .<\/p>\ngetForest\n<p>Get or create a  Forest  with the given  clazz .\nThis method will use the canonical name of the  clazz  if it is not\n<code>null<\/code> or empty, otherwise it will use the package name of the  clazz ,\nsuch as from an anonymous class.<\/p><p>You can configure the  Forest  by using  configure  if this method is\ncreating the  Forest , otherwise the  configure  will not apply the\nconfiguration to the returning  Forest .<\/p>\n"
            }]
          }}
        }},
        "ownPages": [{
          "reference": {
            "path": "kotlindoc",
            "baseUrl": "https://sukhai.github.io/forest",
            "fileName": "forest",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://sukhai.github.io/forest/kotlindoc/forest"
          },
          "description": "",
          "title": "forest",
          "content": "<p><img src=\"https://github.com/sukhai/forest/workflows/CI/badge.svg\" alt=\"\" /> <a href=\"https://jitpack.io/#sukhai/forest\"><img src=\"https://jitpack.io/v/sukhai/forest.svg\" alt=\"\" /><\/a><\/p>\n<h1 id=\"forest\"><a href=\"#forest\" id=\"forest\" class=\"anchor\"><\/a>Forest<\/h1>\n<p>Forest is A lightweight Android-Kotlin first logging library. It is inspired by the\n<a href=\"https://github.com/JakeWharton/timber\">Timber<\/a> project. Although Timber is good and easy to use,\nbut it's missing some features that can work better on an Android project.<\/p>\n<p>For more information please visit the <a href=\"https://sukhai.github.io/forest/\">website<\/a>.<\/p>\n<h2 id=\"basic-usage\"><a href=\"#basic-usage\" id=\"basic-usage\" class=\"anchor\"><\/a>Basic Usage<\/h2>\n<p>You will have to plant at least a {{ anchor(title='Tree', itemId='Tree', collectionType='wiki') }}\nto the <code>Forest<\/code> first so you can receive a log event from the <code>Forest<\/code>. By default, this library\ncomes with {{ anchor(title='DebugTree', itemId='DebugTree') }}, which print the logs to the logcat,\nand we will be using this as an example on this page.<\/p>\n<h4 id=\"step-1-plant-a-tree\"><a href=\"#step-1-plant-a-tree\" id=\"step-1-plant-a-tree\" class=\"anchor\"><\/a>Step 1: Plant a Tree<\/h4>\n<pre><code class=\"language-kotlin\">// onCreate() of your application class or application entry point\nForest.plant(DebugTree())\n<\/code><\/pre>\n<h4 id=\"step-2-create-a-forest-in-any-of-your-class\"><a href=\"#step-2-create-a-forest-in-any-of-your-class\" id=\"step-2-create-a-forest-in-any-of-your-class\" class=\"anchor\"><\/a>Step 2: Create a Forest in any of your class<\/h4>\n<pre><code class=\"language-kotlin\">val forest = getForest(MyClass::class.java)\n<\/code><\/pre>\n<h4 id=\"step-3-start-logging\"><a href=\"#step-3-start-logging\" id=\"step-3-start-logging\" class=\"anchor\"><\/a>Step 3: Start logging!<\/h4>\n<pre><code class=\"language-kotlin\">forest.v(&quot;a message&quot;)\nforest.d(&quot;a message&quot;)\nforest.i(&quot;a message&quot;)\nforest.w(&quot;a message&quot;)\nforest.e(&quot;a message&quot;)\nforest.f(&quot;a message&quot;)\n<\/code><\/pre>\n<h3 id=\"global-forest\"><a href=\"#global-forest\" id=\"global-forest\" class=\"anchor\"><\/a>Global Forest<\/h3>\n<p>You can optionally use the <a href=\"../features/forest#global-forest\">Global Forest<\/a>\nto log event. The benefit of using the {{ anchor(title='Global Forest', itemId='Global Forest', collectionType='wiki') }}\nis it's easy to use and you do not have to create a Forest on any of your class.\nYou can just use the static methods to log event:<\/p>\n<pre><code class=\"language-kotlin\">// onCreate() of your application class or application entry point\nForest.plant(DebugTree())\n\n// Start logging!\nForest.v(&quot;a message&quot;)\nForest.d(&quot;a message&quot;)\nForest.i(&quot;a message&quot;)\nForest.w(&quot;a message&quot;)\nForest.e(&quot;a message&quot;)\nForest.f(&quot;a message&quot;)\n<\/code><\/pre>\n<h2 id=\"features\"><a href=\"#features\" id=\"features\" class=\"anchor\"><\/a>Features<\/h2>\n<p>Features offer by this library includes:<\/p>\n<ul>\n<li>Log messages with a named logger. See {{ anchor(title='Forest', itemId='Forest', collectionType='wiki') }}.<\/li>\n<li>Log message with a global logger. See <a href=\"wiki/features/forest#global-forest\">Global Forest<\/a>.<\/li>\n<li>Multiple log handlers. See {{ anchor(title='Tree', itemId='Tree', collectionType='wiki') }}.<\/li>\n<li>Adding additional attributes to a log. See {{ anchor(title='adding attributes', itemId='Adding Attributes', collectionType='wiki') }}.<\/li>\n<li>Share data globally with all the log handlers. See {{ anchor(title='Forest Context', itemId='Forest Context', collectionType='wiki') }}.<\/li>\n<li>Pre-process a log. See {{ anchor(title='pre-processing callback', itemId='Pre-process Log', collectionType='wiki') }}.<\/li>\n<\/ul>\n<h2 id=\"full-documentation\"><a href=\"#full-documentation\" id=\"full-documentation\" class=\"anchor\"><\/a>Full Documentation<\/h2>\n<ul>\n<li><a href=\"https://sukhai.github.io/forest/\">Website<\/a><\/li>\n<\/ul>\n<h2 id=\"license\"><a href=\"#license\" id=\"license\" class=\"anchor\"><\/a>License<\/h2>\n<pre><code>Copyright 2020 Su Khai Koh\n\nLicensed under the Apache License, Version 2.0 (the &quot;License&quot;);\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an &quot;AS IS&quot; BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n<\/code><\/pre>\n"
        }]
      },
      "forest-android": {
        "ownKey": "forest-android",
        "childrenPages": {"big": {
          "ownKey": "big",
          "childrenPages": {"forest": {
            "ownKey": "forest",
            "childrenPages": {"android": {
              "ownKey": "android",
              "childrenPages": {"trees": {
                "ownKey": "trees",
                "childrenPages": {"debugtree": {
                  "ownKey": "debugtree",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc/forest-android",
                      "baseUrl": "https://sukhai.github.io/forest",
                      "fileName": "big/forest/android/trees/debugtree",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "https://sukhai.github.io/forest/kotlindoc/forest-android/big/forest/android/trees/debugtree"
                    },
                    "description": "",
                    "title": "DebugTree",
                    "content": "<p>A debug tree that uses Android logger to log messages.<\/p><init>\n<p>A debug tree that uses Android logger to log messages.<\/p>\nlog\n\n"
                  }]
                }},
                "ownPages": [{
                  "reference": {
                    "path": "kotlindoc/forest-android",
                    "baseUrl": "https://sukhai.github.io/forest",
                    "fileName": "big/forest/android/trees",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://sukhai.github.io/forest/kotlindoc/forest-android/big/forest/android/trees"
                  },
                  "description": "",
                  "title": "big.forest.android.trees",
                  "content": "<p>DebugTree<\/p>\n<p>A debug tree that uses Android logger to log messages.<\/p>\n"
                }]
              }}
            }}
          }}
        }},
        "ownPages": [{
          "reference": {
            "path": "kotlindoc",
            "baseUrl": "https://sukhai.github.io/forest",
            "fileName": "forest-android",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://sukhai.github.io/forest/kotlindoc/forest-android"
          },
          "description": "",
          "title": "forest-android",
          "content": "<p><img src=\"https://github.com/sukhai/forest/workflows/CI/badge.svg\" alt=\"\" /> <a href=\"https://jitpack.io/#sukhai/forest\"><img src=\"https://jitpack.io/v/sukhai/forest.svg\" alt=\"\" /><\/a><\/p>\n<h1 id=\"forest\"><a href=\"#forest\" id=\"forest\" class=\"anchor\"><\/a>Forest<\/h1>\n<p>Forest is A lightweight Android-Kotlin first logging library. It is inspired by the\n<a href=\"https://github.com/JakeWharton/timber\">Timber<\/a> project. Although Timber is good and easy to use,\nbut it's missing some features that can work better on an Android project.<\/p>\n<p>For more information please visit the <a href=\"https://sukhai.github.io/forest/\">website<\/a>.<\/p>\n<h2 id=\"basic-usage\"><a href=\"#basic-usage\" id=\"basic-usage\" class=\"anchor\"><\/a>Basic Usage<\/h2>\n<p>You will have to plant at least a {{ anchor(title='Tree', itemId='Tree', collectionType='wiki') }}\nto the <code>Forest<\/code> first so you can receive a log event from the <code>Forest<\/code>. By default, this library\ncomes with {{ anchor(title='DebugTree', itemId='DebugTree') }}, which print the logs to the logcat,\nand we will be using this as an example on this page.<\/p>\n<h4 id=\"step-1-plant-a-tree\"><a href=\"#step-1-plant-a-tree\" id=\"step-1-plant-a-tree\" class=\"anchor\"><\/a>Step 1: Plant a Tree<\/h4>\n<pre><code class=\"language-kotlin\">// onCreate() of your application class or application entry point\nForest.plant(DebugTree())\n<\/code><\/pre>\n<h4 id=\"step-2-create-a-forest-in-any-of-your-class\"><a href=\"#step-2-create-a-forest-in-any-of-your-class\" id=\"step-2-create-a-forest-in-any-of-your-class\" class=\"anchor\"><\/a>Step 2: Create a Forest in any of your class<\/h4>\n<pre><code class=\"language-kotlin\">val forest = getForest(MyClass::class.java)\n<\/code><\/pre>\n<h4 id=\"step-3-start-logging\"><a href=\"#step-3-start-logging\" id=\"step-3-start-logging\" class=\"anchor\"><\/a>Step 3: Start logging!<\/h4>\n<pre><code class=\"language-kotlin\">forest.v(&quot;a message&quot;)\nforest.d(&quot;a message&quot;)\nforest.i(&quot;a message&quot;)\nforest.w(&quot;a message&quot;)\nforest.e(&quot;a message&quot;)\nforest.f(&quot;a message&quot;)\n<\/code><\/pre>\n<h3 id=\"global-forest\"><a href=\"#global-forest\" id=\"global-forest\" class=\"anchor\"><\/a>Global Forest<\/h3>\n<p>You can optionally use the <a href=\"../features/forest#global-forest\">Global Forest<\/a>\nto log event. The benefit of using the {{ anchor(title='Global Forest', itemId='Global Forest', collectionType='wiki') }}\nis it's easy to use and you do not have to create a Forest on any of your class.\nYou can just use the static methods to log event:<\/p>\n<pre><code class=\"language-kotlin\">// onCreate() of your application class or application entry point\nForest.plant(DebugTree())\n\n// Start logging!\nForest.v(&quot;a message&quot;)\nForest.d(&quot;a message&quot;)\nForest.i(&quot;a message&quot;)\nForest.w(&quot;a message&quot;)\nForest.e(&quot;a message&quot;)\nForest.f(&quot;a message&quot;)\n<\/code><\/pre>\n<h2 id=\"features\"><a href=\"#features\" id=\"features\" class=\"anchor\"><\/a>Features<\/h2>\n<p>Features offer by this library includes:<\/p>\n<ul>\n<li>Log messages with a named logger. See {{ anchor(title='Forest', itemId='Forest', collectionType='wiki') }}.<\/li>\n<li>Log message with a global logger. See <a href=\"wiki/features/forest#global-forest\">Global Forest<\/a>.<\/li>\n<li>Multiple log handlers. See {{ anchor(title='Tree', itemId='Tree', collectionType='wiki') }}.<\/li>\n<li>Adding additional attributes to a log. See {{ anchor(title='adding attributes', itemId='Adding Attributes', collectionType='wiki') }}.<\/li>\n<li>Share data globally with all the log handlers. See {{ anchor(title='Forest Context', itemId='Forest Context', collectionType='wiki') }}.<\/li>\n<li>Pre-process a log. See {{ anchor(title='pre-processing callback', itemId='Pre-process Log', collectionType='wiki') }}.<\/li>\n<\/ul>\n<h2 id=\"full-documentation\"><a href=\"#full-documentation\" id=\"full-documentation\" class=\"anchor\"><\/a>Full Documentation<\/h2>\n<ul>\n<li><a href=\"https://sukhai.github.io/forest/\">Website<\/a><\/li>\n<\/ul>\n<h2 id=\"license\"><a href=\"#license\" id=\"license\" class=\"anchor\"><\/a>License<\/h2>\n<pre><code>Copyright 2020 Su Khai Koh\n\nLicensed under the Apache License, Version 2.0 (the &quot;License&quot;);\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an &quot;AS IS&quot; BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n<\/code><\/pre>\n"
        }]
      }
    }
  }}
}