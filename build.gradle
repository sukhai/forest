// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.versions = [
        'android_espresso'    : '3.2.0',
        'android_junit'       : '1.1.0',
        'android_maven'       : '2.1',
        'android_orchestrator': '1.1.1',
        'dokka'               : '0.10.1',
        'gradle'              : '4.0.0',
        'kotlin'              : '1.3.72',
        'ktlint'              : '0.31.0',
        'jacoco'              : '0.8.4',
        'jacoco_android'      : '0.16.0',
        'junit'               : '5.4.0',
        'mannodermaus'        : '1.4.2.1',
        'mockito'             : '2.2.0',
        'sdk_compile'         : 28,
        'sdk_min'             : 23,
        'sdk_target'          : 28
    ]

    List<String> PROPERTY_FILES = [
        "$rootDir/local.properties",
        "$rootDir/gradle/release.properties"
    ] as String[]
    ext.propertyFiles = PROPERTY_FILES

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${versions.gradle}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath "de.mannodermaus.gradle.plugins:android-junit5:${versions.mannodermaus}"
        classpath "com.github.dcendents:android-maven-gradle-plugin:${versions.android_maven}"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${versions.dokka}"
        classpath "com.vanniktech:gradle-android-junit-jacoco-plugin:${versions.jacoco_android}"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

subprojects {
    group = getProp("release.group")
    version = getProp("release.version")
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * Get a Gradle property. This method will search the 'key' in the following order:
 * - System ENV VAR
 * - Default gradle 'getProperty(String)' behavior
 * - From ext.propertyFiles list
 *
 * If no property is found with the 'key', then 'MissingPropertyException' will be thrown.
 *
 * @param key The key of the gradle property.
 * @return The value of the gradle property that associates with the given 'key'.
 * @throw MissingPropertyException If no gradle property is found with the given 'key'.
 */
String getProp(String key) {
    String property = System.getenv(key)
    if (property == null || property.isEmpty()) {
        try {
            property = getProperty(key)
        } catch (Exception ignored) {
            // Ignored
        }
    }

    if (property != null && !property.isEmpty()) {
        return property
    }

    for (String fileName in ext.propertyFiles) {
        property = getPropertyFromFile(key, new File(fileName))
        if (property != null && !property.isEmpty()) {
            return property
        }
    }

    throw new MissingPropertyException(key, String.class)
}

private static String getPropertyFromFile(String key, File file) {
    Properties properties = new Properties()
    try {
        properties.load(file.newDataInputStream())
    } catch (IOException e) {
        println(e.message)
    }

    return properties.getProperty(key)
}
